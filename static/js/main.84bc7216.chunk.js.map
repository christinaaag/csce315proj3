{"version":3,"sources":["assets/logos - white.png","assets/TempProf.png","assets/purpleLoginCard.png","assets/purplePickMoodCard.png","assets/purpleScrollCard.png","assets/temporaryFeed.png","components/Tweet.js","components/Timeline.js","containers/dashboard/components/Button.js","containers/dashboard/components/SentDisp.js","containers/dashboard/components/UserDisp.js","containers/dashboard/Dashboard.js","containers/dashboard/index.js","containers/landing/index.js","containers/landing/Landing.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","styled","Card","TweetCard","props","author","text","date","mood","className","Body","Subtitle","Text","Tweet","Timeline","tweets","userMood","map","tweet","key","url","STYLES","SIZES","Button","children","type","onClick","buttonStyle","buttonSize","checkButtonStyle","includes","checkButtonSize","to","SentDisp","useState","setButton","showButton","window","innerWidth","useEffect","addEventListener","Row","Col","data","title","value","color","lineWidth","style","UserDisp","src","tempProf","tweetsList","Dashboard","tweet_text","a","link","location","href","console","log","Axios","method","headers","response","oauth_token","oauth_token_secret","path","name","image_url","forEach","push","getInformation","Container","margin","logo","alt","width","maxHeight","Landing","process","fluid","variant","size","loginImage","pickMoodImage","scrollImage","App","exact","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.84bc7216.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logos - white.e6a7f38a.png\";","module.exports = __webpack_public_path__ + \"static/media/TempProf.54d1eeeb.png\";","module.exports = __webpack_public_path__ + \"static/media/purpleLoginCard.506c3718.png\";","module.exports = __webpack_public_path__ + \"static/media/purplePickMoodCard.0b9fc6fa.png\";","module.exports = __webpack_public_path__ + \"static/media/purpleScrollCard.480b867e.png\";","module.exports = __webpack_public_path__ + \"static/media/temporaryFeed.d75ff4c9.png\";","import React from 'react';\r\nimport { Card } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nimport './Tweet.css';\r\n\r\nconst styledCard = styled(Card)`\r\n    background-color: red;\r\n    color: blue;\r\n`\r\n\r\nconst TweetCard = (props) => {\r\n    const [author, text, date, mood] = [props.author, props.text, props.date, props.mood];\r\n    return (\r\n        <Card\r\n            className={`tweet tweet--${mood}`}\r\n        >\r\n            <Card.Body>\r\n                <Card.Subtitle>Author: {author}</Card.Subtitle>\r\n                <Card.Text>{text}</Card.Text>\r\n            </Card.Body>\r\n        </Card>\r\n    )\r\n}\r\n\r\nconst styledTweetCard = styled(TweetCard)`\r\n    background-color: red;\r\n    color: blue;\r\n`;\r\n\r\n\r\nexport const Tweet = (props) => {\r\n    return (\r\n        <TweetCard {...props} />\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport { Tweet } from './Tweet';\r\n\r\nconst Timeline = (props) => {\r\n    const [tweets, userMood] = [props.tweets, props.userMood];\r\n    return (\r\n        <div>\r\n            {tweets.map((tweet, key) => (\r\n                (tweet.mood == userMood || userMood == null) ?\r\n                    <div>\r\n                        <Tweet\r\n                            key={key}\r\n                            author={tweet.author}\r\n                            text={tweet.text}\r\n                            date={tweet.date}\r\n                            mood={tweet.mood}\r\n                            url={tweet.url}\r\n                        />\r\n                        <br />\r\n                    </div>\r\n                    : null\r\n            )\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Timeline;","import React from 'react';\r\nimport './Button.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst STYLES = ['btn--primary', 'btn--happy', 'btn--sad', 'btn--neutral'];\r\n\r\nconst SIZES = ['btn--medium', 'btn--large'];\r\n\r\nexport const Button = ({\r\n  children,\r\n  type,\r\n  onClick,\r\n  buttonStyle,\r\n  buttonSize\r\n}) => {\r\n  const checkButtonStyle = STYLES.includes(buttonStyle)\r\n    ? buttonStyle\r\n    : STYLES[0];\r\n\r\n  const checkButtonSize = SIZES.includes(buttonSize) ? buttonSize : SIZES[0];\r\n\r\n  return (\r\n    <Link to='/something' className='btn-mobile'>\r\n      <button\r\n        className={`btn ${checkButtonStyle} ${checkButtonSize}`}\r\n        onClick={onClick}\r\n        type={type}\r\n      >\r\n        {children}\r\n      </button>\r\n    </Link>\r\n  );\r\n};\r\n\r\n","import React, { useState, useEffect, ComponentProps} from 'react';\r\nimport { Button } from './Button.js';\r\nimport { Link } from 'react-router-dom';\r\nimport './SentDisp.css';\r\nimport { Contianer, Row, Col } from 'react-bootstrap';\r\nimport { PieChart } from 'react-minimal-pie-chart';\r\n\r\n\r\n\r\nfunction SentDisp() {\r\n    const [click, setClick] = useState(false);\r\n    const [button, setButton] = useState(true);\r\n\r\n    const showButton = () => {\r\n        if (window.innerWidth <= 960) {\r\n          setButton(false);\r\n        } else {\r\n          setButton(true);\r\n        }\r\n    };\r\n\r\nuseEffect(() => {\r\n    showButton();\r\n  }, []);\r\n\r\n\r\nwindow.addEventListener('resize', showButton);\r\n\r\n\r\n\r\nreturn (\r\n    <>\r\n    \r\n        <div className='sentdisp-container'>\r\n          <div className= 'sentdisp-data'>\r\n            <Row>\r\n              <Col>\r\n              <PieChart\r\n                data={[\r\n                  { title: 'Happy', value: 10, color: '#F8C822' },\r\n                  { title: 'Sad', value: 60, color: '#6693FF' },\r\n                  { title: 'Neutral', value: 20, color: '#958C8C' },\r\n                ]}\r\n\r\n                lineWidth={20}\r\n\r\n                />\r\n                <br></br>\r\n                <br></br>\r\n          \r\n                  <h4 className= 'legend-title'>Tweet Emotions</h4>\r\n                  \r\n                  <div className= 'legend-text' style = {{color: '#F8C822'}}>😊Happy</div>\r\n                  <div className= 'legend-text' style = {{color: '#6693FF'}}>😔Sad</div>\r\n                  <div className= 'legend-text' style = {{color: '#958C8C'}}>😶Neutral</div>\r\n               \r\n              </Col>\r\n             \r\n            </Row>\r\n            \r\n\r\n          </div>\r\n  \r\n          <div className='sentdisp-btns'>\r\n            <Button buttonStyle='btn--happy'>Display Happy Tweets</Button>\r\n            \r\n            \r\n            <Button buttonStyle='btn--sad'>Display Sad Tweets</Button>\r\n            \r\n          \r\n            <Button buttonStyle='btn--neutral'>Display Neutral Tweets</Button>\r\n          \r\n          </div>\r\n        </div>\r\n    \r\n    </>\r\n  );\r\n}\r\n\r\nexport default SentDisp;","import React from 'react';\r\nimport { Contianer, Row, Col } from 'react-bootstrap';\r\nimport tempProf from './../../../assets/TempProf.png';\r\nimport './UserDisp.css';\r\nfunction UserDisp() {\r\n    \r\n\r\n\r\nreturn (\r\n    <>\r\n    <div className=\"userDisp-container\">\r\n        <img className= \"userProfPic\" src ={tempProf}></img>UserName\r\n    </div>\r\n    \r\n    </>\r\n  );\r\n\r\n}\r\nexport default UserDisp;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport './Dashboard.css';\r\nimport './../generalStyle.css';\r\nimport logo from './../../assets/logos - white.png';\r\nimport Timeline from '../../components/Timeline';\r\nimport SentDisp from './components/SentDisp';\r\nimport UserDisp from './components/UserDisp';\r\nimport tempTweets from './../../assets/temporaryFeed.png';\r\nimport Axios from \"axios\";\r\n\r\nconst tweetsList = [\r\n    {\r\n        author: \"Guy Boring\",\r\n        text: \"This is a neutral tweet.\",\r\n        mood: 'neutral',\r\n        date: '10/01/20',\r\n        url: 'twitter.com',\r\n    }, {\r\n        author: \"Happ E. Man\",\r\n        text: \"This is a happy tweet.\",\r\n        mood: 'happy',\r\n        date: '10/02/20',\r\n        url: 'twitter.com',\r\n    },{\r\n        author: \"Sad Boy\",\r\n        text: \"This is a sad tweet.\",\r\n        mood: 'sad',\r\n        date: '10/03/20',\r\n        url: 'twitter.com',\r\n    },\r\n];\r\n\r\nconst Dashboard = () => {\r\n\r\n    var user_name, image_url, tweets;\r\n    var tweet_text = []\r\n    async function getInformation() {\r\n        var link = window.location.href\r\n        console.log(link)\r\n        var response = await Axios({\r\n            method: \"GET\",\r\n            url: link,\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        });\r\n        \r\n        var oauth_token = response.data.oauth_token\r\n        var oauth_token_secret = response.data.oauth_token_secret\r\n        console.log({oauth_token, oauth_token_secret})\r\n        var path = '/user?token_key=' + oauth_token + '&token_secret=' + oauth_token_secret\r\n        console.log(path)\r\n        response = await Axios({\r\n            method: \"GET\",\r\n            url: path,\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        })\r\n\r\n        console.log(response.data)\r\n        user_name = response.data.name\r\n        image_url = response.data.image_url;\r\n\r\n        path = '/tweet_text?token_key=' + oauth_token + '&token_secret=' + oauth_token_secret\r\n        response = await Axios({\r\n            method: \"GET\",\r\n            url: path,\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        })\r\n        tweets = response.data\r\n        console.log(response.data)\r\n\r\n        tweets.forEach(function(tweet){\r\n            tweet_text.push(tweet.text);\r\n        });\r\n\r\n        console.log(tweet_text)\r\n    }\r\n    getInformation();\r\n    const scrollContainerStyle = { width: \"800px\", maxHeight: \"400px\" };\r\n    return (\r\n        <div className=\"body\">\r\n            <Container style={{ margin: 0 }}>\r\n                <h1 className=\"logo\">Moodia<img className=\"logo\" src={logo} alt=\"\" /></h1>\r\n            </Container>\r\n            <Container style={{ margin: 0 }}>\r\n\r\n                <Col>\r\n\r\n                    <UserDisp />\r\n\r\n                    <SentDisp />\r\n\r\n                </Col>\r\n\r\n\r\n\r\n\r\n                <Col className=\"feed\">\r\n                    <h2>Twitter Feed</h2>\r\n                    <br />\r\n                    <div className=\"scrollbar scrollbar-primary\" style={scrollContainerStyle}>\r\n                        <Timeline tweets={tweetsList}/>\r\n                    </div>\r\n                </Col>\r\n\r\n\r\n            </Container>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dashboard;","import Dashboard from './Dashboard';\r\nexport default Dashboard;","import Landing from './Landing';\r\nexport default Landing;","import React, { useState, useEffect } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Button, Container, Row, Col } from 'react-bootstrap';\r\nimport './Landing.css';\r\nimport './../generalStyle.css';\r\nimport logo from './../../assets/logos - white.png';\r\nimport loginImage from './../../assets/purpleLoginCard.png';\r\nimport pickMoodImage from './../../assets/purplePickMoodCard.png';\r\nimport scrollImage from './../../assets/purpleScrollCard.png';\r\nimport Axios from \"axios\";\r\n\r\nconst Landing = () => {\r\n    async function urlGet() {\r\n        var response = await Axios({\r\n            method: \"GET\",\r\n            url: `${process.env.PUBLIC_URL}/request_token`,\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        });\r\n\r\n        var link = response.data.link\r\n\r\n        console.log(link);\r\n        window.location.href = link;\r\n    }\r\n\r\n\r\n    \r\n    return (\r\n        <div className=\"body\">\r\n            <Container fluid>\r\n                <Row>\r\n                    <Col>\r\n                        <h1>Moodia<img className=\"logo\" src={logo} alt=\"\" /></h1>\r\n                        <p className=\"subText\">'cuz sometimes, you're just not in the mood.\r\n                    <br /> <br />\r\n                    Moodia is a simple way to filter and display your timeline based on emotions.\r\n                    <br />\r\n                    Simply login to your Twitter, select the mood that you're in and watch your feed transform.\r\n                    <br /><br />\r\n                    To get started, sign in and we'll take care of the rest.\r\n                    <br /><br /></p>\r\n                        <p className=\"twitterButton\">\r\n                            <Button\r\n                                variant=\"primary\"\r\n                                size=\"sm\"\r\n                                onClick={urlGet}\r\n                            >\r\n                                Sign in with Twitter\r\n                        </Button>{' '}</p>\r\n                    </Col>\r\n                    <Col className=\"colRight\">\r\n                        <Row><img className=\"imageCard\" src={loginImage} alt=\"\" /></Row>\r\n                        <Row><img className=\"imageCard\" src={pickMoodImage} alt=\"\" /></Row>\r\n                        <Row><img className=\"imageCard\" src={scrollImage} alt=\"\" /></Row>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n\r\n        </div>\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Landing;","import React from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n} from 'react-router-dom';\r\nimport Dashboard from \"./containers/dashboard\";\r\nimport Landing from \"./containers/landing\";\r\nimport Axios from \"axios\"\r\nimport './App.css';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path={\"/christina-gan5/csce315project3/\"} component={Landing} />\r\n          <Route path={\"/christina-gan5/csce315project3/dashboard\"} component={Dashboard} />\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}