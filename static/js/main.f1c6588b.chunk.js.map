{"version":3,"sources":["assets/logos - white.png","assets/purpleLoginCard.png","assets/purplePickMoodCard.png","assets/purpleScrollCard.png","assets/TempProf.png","assets/temporaryFeed.png","components/Tweet.js","components/Timeline.js","containers/dashboard/components/Button.js","containers/dashboard/components/SentDisp.js","containers/dashboard/components/UserDisp.js","containers/dashboard/Dashboard.js","containers/dashboard/index.js","containers/landing/index.js","containers/landing/Landing.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","styled","Card","TweetCard","props","author","text","date","mood","className","Body","Subtitle","Text","Tweet","Timeline","tweets","userMood","Container","fluid","map","tweet","key","Row","Col","url","STYLES","SIZES","Button","children","type","onClick","buttonStyle","buttonSize","value","checkButtonStyle","includes","checkButtonSize","SentDisp","useState","setButton","showButton","window","innerWidth","useEffect","addEventListener","xs","data","title","color","lineWidth","style","changeMood","UserDisp","getInformation","a","tweet_text","emotions","link","location","href","console","log","Axios","method","headers","response","oauth_token","oauth_token_secret","path","user_name","name","image_url","forEach","push","raw_text","replace","tweetsList","Dashboard","setUserMood","useAsync","promiseFn","error","isPending","message","margin","src","logo","alt","md","e","target","Landing","process","variant","size","loginImage","pickMoodImage","scrollImage","App","exact","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.f1c6588b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logos - white.e6a7f38a.png\";","module.exports = __webpack_public_path__ + \"static/media/purpleLoginCard.506c3718.png\";","module.exports = __webpack_public_path__ + \"static/media/purplePickMoodCard.0b9fc6fa.png\";","module.exports = __webpack_public_path__ + \"static/media/purpleScrollCard.480b867e.png\";","module.exports = __webpack_public_path__ + \"static/media/TempProf.54d1eeeb.png\";","module.exports = __webpack_public_path__ + \"static/media/temporaryFeed.d75ff4c9.png\";","import React from 'react';\r\nimport { Card } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nimport './Tweet.css';\r\n\r\nconst styledCard = styled(Card)`\r\n    background-color: red;\r\n    color: blue;\r\n`\r\n\r\nconst TweetCard = (props) => {\r\n    const [author, text, date, mood] = [props.author, props.text, props.date, props.mood];\r\n    return (\r\n        <Card\r\n            className={`tweet tweet--${mood}--outline`}\r\n        >\r\n            <Card.Body>\r\n                <Card.Subtitle>Author: {author}</Card.Subtitle>\r\n                <Card.Text>{text}</Card.Text>\r\n            </Card.Body>\r\n        </Card>\r\n    )\r\n}\r\n\r\nconst styledTweetCard = styled(TweetCard)`\r\n    background-color: red;\r\n    color: blue;\r\n`;\r\n\r\n\r\nexport const Tweet = (props) => {\r\n    return (\r\n        <TweetCard {...props} />\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport { Tweet } from './Tweet';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\n\r\nconst Timeline = (props) => {\r\n    const [tweets, userMood] = [props.tweets, props.userMood];\r\n    return (\r\n        <Container fluid>\r\n            {tweets.map((tweet, key) => (\r\n                (tweet.mood == userMood || userMood == \"all\") ?\r\n                    <Row>\r\n                        <Col>\r\n                            <Tweet\r\n                                key={key}\r\n                                author={tweet.author}\r\n                                text={tweet.text}\r\n                                date={tweet.date}\r\n                                mood={tweet.mood}\r\n                                url={tweet.url}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    : null\r\n            )\r\n            )}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Timeline;","import React from 'react';\r\nimport './Button.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst STYLES = ['btn--primary', 'btn--happy', 'btn--sad', 'btn--neutral'];\r\n\r\nconst SIZES = ['btn--medium', 'btn--large'];\r\n\r\nexport const Button = ({\r\n  children,\r\n  type,\r\n  onClick,\r\n  buttonStyle,\r\n  buttonSize,\r\n  value\r\n}) => {\r\n  const checkButtonStyle = STYLES.includes(buttonStyle)\r\n    ? buttonStyle\r\n    : STYLES[0];\r\n\r\n  const checkButtonSize = SIZES.includes(buttonSize) ? buttonSize : SIZES[0];\r\n\r\n  return (\r\n      <button\r\n        value={value}\r\n        className={`btn ${checkButtonStyle} ${checkButtonSize}`}\r\n        onClick={onClick}\r\n        type={type}\r\n      >\r\n        {children}\r\n      </button>\r\n  );\r\n};\r\n\r\n","import React, { useState, useEffect, ComponentProps } from 'react';\r\nimport { Button } from './Button.js';\r\nimport { Link } from 'react-router-dom';\r\nimport './SentDisp.css';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport { PieChart } from 'react-minimal-pie-chart';\r\n\r\n\r\n\r\nconst SentDisp = (props) => {\r\n  const [click, setClick] = useState(false);\r\n  const [button, setButton] = useState(true);\r\n\r\n  const showButton = () => {\r\n    if (window.innerWidth <= 960) {\r\n      setButton(false);\r\n    } else {\r\n      setButton(true);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    showButton();\r\n  }, []);\r\n\r\n\r\n  window.addEventListener('resize', showButton);\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n\r\n      <div className='sentdisp-container'>\r\n        <Container fluid>\r\n          <div className='sentdisp-data'>\r\n            <Row>\r\n              <Col xs={12}>\r\n                <PieChart\r\n                  data={[\r\n                    { title: 'Happy', value: 10, color: '#F8C822' },\r\n                    { title: 'Sad', value: 60, color: '#6693FF' },\r\n                    { title: 'Neutral', value: 20, color: '#958C8C' },\r\n                  ]}\r\n\r\n                  lineWidth={20}\r\n\r\n                />\r\n                <br></br>\r\n                <br></br>\r\n\r\n                <h4 className='legend-title'>Tweet Emotions</h4>\r\n\r\n                <div className='legend-text' style={{ color: '#F8C822' }}>😊Happy</div>\r\n                <div className='legend-text' style={{ color: '#6693FF' }}>😔Sad</div>\r\n                <div className='legend-text' style={{ color: '#958C8C' }}>😶Neutral</div>\r\n\r\n              </Col>\r\n\r\n            </Row>\r\n\r\n\r\n          </div>\r\n          <Row>\r\n            <Col xs={12}>\r\n              <div className='sentdisp-btns'>\r\n                <Button buttonStyle='btn--happy' onClick={props.changeMood} value={'happy'}>Display Happy Tweets</Button>\r\n\r\n                <Button buttonStyle='btn--sad' onClick={props.changeMood} value={'sad'}>Display Sad Tweets</Button>\r\n\r\n\r\n                <Button buttonStyle='btn--neutral' onClick={props.changeMood} value={'neutral'}>Display Neutral Tweets</Button>\r\n\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SentDisp;","import React from 'react';\r\nimport { Contianer, Row, Col } from 'react-bootstrap';\r\nimport tempProf from './../../../assets/TempProf.png';\r\nimport './UserDisp.css';\r\nimport Dashboard from '../Dashboard.js';\r\nfunction UserDisp() {\r\n    \r\n\r\n\r\nreturn (\r\n    <>\r\n    <div className=\"userDisp-container\">\r\n    {Dashboard.image_url}hello\r\n        <img className= \"userProfPic\" src ={Dashboard.image_url}></img>UserName\r\n    </div>\r\n    \r\n    </>\r\n  );\r\n\r\n}\r\nexport default UserDisp;","import React, { useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport './Dashboard.css';\r\nimport './../generalStyle.css';\r\nimport logo from './../../assets/logos - white.png';\r\nimport Timeline from '../../components/Timeline';\r\nimport SentDisp from './components/SentDisp';\r\nimport UserDisp from './components/UserDisp';\r\nimport tempTweets from './../../assets/temporaryFeed.png';\r\nimport Axios from \"axios\";\r\nimport {useAsync} from \"react-async\"\r\n\r\n\r\nasync function getInformation() {\r\n   \r\n    var user_name, image_url, tweets;\r\n    var tweet_text = []\r\n    var emotions = []\r\n    var link = window.location.href\r\n    console.log(link)\r\n\r\n    var response = await Axios({\r\n        method: \"GET\",\r\n        url: link,\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        }\r\n    });\r\n\r\n    var oauth_token = response.data.oauth_token\r\n    var oauth_token_secret = response.data.oauth_token_secret\r\n    var path = '/christina-gan5/csce315project3/user?token_key=' + oauth_token + '&token_secret=' + oauth_token_secret\r\n    \r\n    response = await Axios({\r\n        method: \"GET\",\r\n        url: path,\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        }\r\n    })\r\n\r\n    user_name = response.data.name\r\n    image_url = response.data.image_url;\r\n\r\n    path = '/christina-gan5/csce315project3/tweet_text?token_key=' + oauth_token + '&token_secret=' + oauth_token_secret\r\n    response = await Axios({\r\n        method: \"GET\",\r\n        url: path,\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        }\r\n    })\r\n    tweets = response.data\r\n\r\n    tweets.forEach(function (tweet) {\r\n        tweet_text.push(tweet.text);\r\n    });\r\n\r\n    \r\n    for (var text of tweet_text){\r\n        var raw_text = text.replace(/(?:https?|ftp):\\/\\/[\\n\\S]+/g, '');\r\n        path = '/christina-gan5/csce315project3/tweet_emotion?text=' + raw_text\r\n        response = await Axios({\r\n            method: \"GET\",\r\n            url: path,\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        })\r\n        emotions.push(response.data)\r\n    }\r\n\r\n    return [user_name, image_url, tweets, tweet_text, emotions]\r\n}\r\n\r\nconst tweetsList = [\r\n    {\r\n        author: \"Guy Boring\",\r\n        text: \"This is a neutral tweet.\",\r\n        mood: 'neutral',\r\n        date: '10/01/20',\r\n        url: 'twitter.com',\r\n    }, {\r\n        author: \"Happ E. Man\",\r\n        text: \"This is a happy tweet.\",\r\n        mood: 'happy',\r\n        date: '10/02/20',\r\n        url: 'twitter.com',\r\n    }, {\r\n        author: \"Sad Boy\",\r\n        text: \"This is a sad tweet.\",\r\n        mood: 'sad',\r\n        date: '10/03/20',\r\n        url: 'twitter.com',\r\n    }, \r\n];\r\n\r\nvar user_name, image_url, tweets, tweet_text, emotions;\r\nconst Dashboard = () => {\r\n    const [userMood, setUserMood] = useState(\"all\");\r\n\r\n    var emotions = []\r\n    function changeMood(mood) {\r\n        if(userMood == mood){\r\n            setUserMood(\"all\");\r\n        } else {\r\n            setUserMood(mood);\r\n        }\r\n    }\r\n    const scrollContainerStyle = { width: \"800px\", maxHeight: \"800px\" };\r\n    const {data, error, isPending } = useAsync({promiseFn: getInformation})\r\n    if (isPending) return \"Loading..\"\r\n    if (error) {\r\n        console.log(window.location.href)\r\n        console.log(error)\r\n        return `Something went wrong: ${error.message}`\r\n    }\r\n\r\n    \r\n    if (data){\r\n        user_name = data[0]\r\n        image_url = data[1]\r\n        tweets = data[2]\r\n        tweet_text = data[3]\r\n        emotions = data[4]\r\n        console.log(data)\r\n\r\n        return (\r\n            <div className=\"body\">\r\n                <Container style={{ margin: 0 }}>\r\n                    <h1 className=\"logo\">Moodia<img className=\"logo\" src={logo} alt=\"\" /></h1>\r\n                </Container>\r\n                <Container fluid>\r\n                    <Row className=\"row\">\r\n                        <Col xs={12} md={3}>\r\n                           \r\n                        <div className=\"userDisp-container\">\r\n                            <img className= \"userProfPic\" src ={image_url}></img>{user_name}\r\n                        </div>\r\n                        \r\n                        <SentDisp changeMood={e => changeMood(e.target.value)} />\r\n\r\n                        </Col>\r\n\r\n                        <Col xs={8}>\r\n                            <h2>Twitter Feed</h2>\r\n                            <h2>{userMood}</h2>\r\n                            <br />\r\n                            <div className=\"scrollbar scrollbar-primary\" >\r\n                                <Timeline tweets={tweetsList} userMood={userMood} />\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n\r\n\r\n                </Container>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Dashboard;","import Dashboard from './Dashboard';\r\nexport default Dashboard;","import Landing from './Landing';\r\nexport default Landing;","import React, { useState, useEffect } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Button, Container, Row, Col } from 'react-bootstrap';\r\nimport './Landing.css';\r\nimport './../generalStyle.css';\r\nimport logo from './../../assets/logos - white.png';\r\nimport loginImage from './../../assets/purpleLoginCard.png';\r\nimport pickMoodImage from './../../assets/purplePickMoodCard.png';\r\nimport scrollImage from './../../assets/purpleScrollCard.png';\r\nimport Axios from \"axios\";\r\n\r\nconst Landing = () => {\r\n    async function urlGet() {\r\n        var response = await Axios({\r\n            method: \"GET\",\r\n            url: `${process.env.PUBLIC_URL}/request_token`,\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        });\r\n\r\n        var link = response.data.link\r\n\r\n        console.log(link);\r\n        window.location.href = link;\r\n    }\r\n    \r\n    return (\r\n        <div className=\"body\">\r\n            <Container fluid>\r\n                <Row>\r\n                    <Col>\r\n                        <h1>Moodia<img className=\"logo\" src={logo} alt=\"\" /></h1>\r\n                        <p className=\"subText\">'cuz sometimes, you're just not in the mood.\r\n                    <br /> <br />\r\n                    Moodia is a simple way to filter and display your timeline based on emotions.\r\n                    <br />\r\n                    Simply login to your Twitter, select the mood that you're in and watch your feed transform.\r\n                    <br /><br />\r\n                    To get started, sign in and we'll take care of the rest.\r\n                    <br /><br /></p>\r\n                        <p className=\"twitterButton\">\r\n                            <Button\r\n                                variant=\"primary\"\r\n                                size=\"sm\"\r\n                                onClick={urlGet}\r\n                            >\r\n                                Sign in with Twitter\r\n                        </Button>{' '}</p>\r\n                    </Col>\r\n                    <Col className=\"colRight\">\r\n                        <Row><img className=\"imageCard\" src={loginImage} alt=\"\" /></Row>\r\n                        <Row><img className=\"imageCard\" src={pickMoodImage} alt=\"\" /></Row>\r\n                        <Row><img className=\"imageCard\" src={scrollImage} alt=\"\" /></Row>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n\r\n        </div>\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Landing;","import React from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n} from 'react-router-dom';\r\nimport Dashboard from \"./containers/dashboard\";\r\nimport Landing from \"./containers/landing\";\r\nimport Axios from \"axios\"\r\nimport './App.css';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path={\"/christina-gan5/csce315project3/\"} component={Landing} />\r\n          <Route path={\"/christina-gan5/csce315project3/dashboard\"} component={Dashboard} />\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}